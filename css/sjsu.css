/* AXIOMS, via https://every-layout.dev/rudiments/axioms/

Text elements no larger than 70ch.

*/

/*
Lea Verou's pseudo-private properties from her CSS Variable Secrets presentation
--_color: var(--color, [fallback/default]);
...
color: var(--_color);

*/

/* LAYERS
from Modern CSS for Dynamic Component-based Architecture - Stephanie Eckles 
layer order suggestion:
@layer reset, theme, global, layout, components, utilities, states;
*/

@layer reset, theme, layout, components, utilities, states, overrides;

@layer reset {

:root {
    --link-color: currentColor;
    --font-body: system-ui, sans-serif;
    --font-display: 'Times New Roman', serif;
    --measure: 66ch; /* if 70ch limit is axiom, why < 70 here? -b 5.29 */
    --vr: 1rem;
}

*,
*::before,
*::after {
    box-sizing: border-box;
}

* {
    --_background-color: var(--background-color, white);
    --_color: var(--color, var(--text-color, black));
    --_max-inline-size:var(--measure,initial);
    margin: 0;
    background-color: var(--_background-color);
    color: var(--_color);
    max-inline-size:var(--_max-inline-size);
}

html {
    -moz-text-size-adjust: none;
    -webkit-text-size-adjust: none;
    text-size-adjust: none;
    max-inline-size: none;
}

picture,
video,
canvas,
svg {
    display: block;
    max-width: 100%;
}

/* img reset via Harry Roberts: https://twitter.com/csswizardry/status/1717841334462005661 */
img {
    max-width: 100%;    
    height: auto;
    vertical-align: middle;
    font-style:italic;
    background-repeat: no-repeat;
    background-size: cover;
    shape-margin: 0.75rem;

}

input,
button,
textarea,
select {
    font: inherit;
}

body {
    --_font-family: var(--font-body, inherit);
    min-height: 100vh;
    line-height: 1.5;
    max-inline-size: none;
    font-family: var(--_font-family);
}

h1,
h2,
h3,
h4,
button,
input,
label {
    line-height: 1.1;
}

h1,
h2,
h3,
h4,
h5,
h6 {
    --_font-family: var(--font-display, inherit);
    --_font-size: var(--font-size, initial);
    text-wrap: balance;
    font-family: var(--_font-family);
    font-size: var(--_font-size);
}

p, blockquote {
    --_font-family: var(--font-body, inherit);
    --_font-size: var(--font-size, initial);
    font-family: var(--_font-family);
    font-size: var(--_font-size);
}

a {
    --color: var(--link-color, blue);
}

/* <a> elements that don't have a class get default styles */
a:not([class]) {
    text-decoration-skip-ink: auto;
    text-decoration-thickness: max(0.08em, 1px);
    text-underline-offset: 0.15em;
}

a[aria-current] {
    --color: var(--text-color, black);
}

hr {
    margin: var(--vr);
}

input,
button,
textarea,
select {
    font: inherit;
}

textarea:not([rows]) {
    min-height: 10em
}

:target {
    /* Scroll padding allowance above anchor links */
    scroll-padding-block-start: 2rem;
}

:focus {
    /* Scroll padding allowance below focused elements to ensure they are clearly in view */
    scroll-padding-block-end: 8vh;
}

:focus-visible {
    --outline-size: max(2px, 0.15em);
    outline: var(--outline-width, var(--outline-size)) var(--outline-style, solid) var(--outline-color, currentColor);
    outline-offset: var(--outline-offset, var(--outline-size));
}

@font-face {
    font-family: 'SJSUSpartan';
    font-weight: normal;
    src: local('SJSUSpartanRegular'), url('/aspis/fonts/SJSUSpartanRegular.woff') format('woff');
}

@font-face {
    font-family: 'SJSUSpartan';
    font-weight: bold;
    src: local('SJSUSpartanBold'), url('/aspis/fonts/SJSUSpartanBold.woff') format('woff');

}
}

@layer theme {

:root {    
    --sjsu-font-body: 'Helvetica Neue', system-ui, sans-serif;
    --sjsu-font-display: 'Nunito Sans', Verdana, sans-serif;
    --sjsu-font-spartan: 'SJSUSpartan', 'Times New Roman', serif;
    --sjsu-color-blue: #0055a8;
    --sjsu-color-gold: #e5a823;
    --sjsu-color-rollover-blue: #1c88f4;
    --sjsu-color-not-quite-black: #333333;
    --sjsu-color-gray: #939597;
    --sjsu-color-dark-gray: #53565a;
    --sjsu-color-paseo-gray: #ededed;
    --sjsu-color-normal-gray: #9b9b9b;
    --sjsu-color-orange: #f08700;
    /* vr = vertical rhythm */
    --sjsu-vr: 2rem;
    --sjsu-2vr: calc(2 * var(--sjsu-vr));
    --sjsu-3vr: calc(3 * var(--sjsu-vr));
    --sjsu-vr-half: calc(.5 * var(--sjsu-vr));
    --sjsu-layout-width: 1280px;
    --sjsu-grid-min: 30ch;
    --sjsu-grid-gap: 2vw;
    --padding: clamp(1rem, 3%, 1.5rem);
    --padding-double: clamp(2rem, 6%, 3rem);
    --padding-triple: clamp(3rem, 9%, 4.5rem);
    --padding-extra: clamp(4rem, 12%, 6rem);
    --padding-half: clamp(0.5rem, 1.5%, 1rem);
    --container-max: var(--sjsu-layout-width);
    --font-body: var(--sjsu-font-body, inherit);
    --font-display: var(--sjsu-font-display, inherit);
    --link-color: var(--sjsu-color-blue);
    --text-color: var(--sjsu-color-not-quite-black);

    /* UTOPIA - fluid typography and type scale
https: //utopia.fyi/type/calculator?c=320,18,1.2,1240,23,1.25,5,2,&s=0.75|0.5|0.25,1.5|2|3|4|6,s-l&g=s,l,xl,12  */
    --step--2: clamp(0.7813rem, 0.733rem + 0.2413vw, 0.92rem);
    --step--1: clamp(0.9375rem, 0.8636rem + 0.3696vw, 1.15rem);
    --step-0: clamp(1.125rem, 1.0163rem + 0.5435vw, 1.4375rem);
    --step-1: clamp(1.35rem, 1.1946rem + 0.7772vw, 1.7969rem);
    --step-2: clamp(1.62rem, 1.4022rem + 1.0891vw, 2.2463rem);
    --step-3: clamp(1.9438rem, 1.6433rem + 1.5022vw, 2.8075rem);
    --step-4: clamp(2.3325rem, 1.9232rem + 2.0467vw, 3.5094rem);
    --step-5: clamp(2.7994rem, 2.2472rem + 2.7609vw, 4.3869rem);

}

body {
    --_font-size: var(--font-size, var(--step-0, 1rem));
    --_font-family: var(--font-body, inherit);
    font-size: var(--_font-size);
    font-family: var(--_font-family);    
}

header, main, footer {
    max-inline-size: var(--sjsu-layout-width);
}


h1 {
    --font-family: var(--font-display, inherit);
    --font-size: var(--step-4, initial);
}

h2 {
    --font-family: var(--font-display, inherit);
    --font-size: var(--step-3, initial);
}

h3 {
    --font-family: var(--font-display, inherit);
    --font-size: var(--step-2, initial);
}

h4 {
    --font-family: var(--font-display, inherit);
    --font-size: var(--step-1, initial);
}

h5 {
    --font-family: var(--font-display, inherit);
    --font-size: var(--step-0, initial);
}

h6 {
    --font-family: var(--font-display, inherit);
    --font-size: var(--step--1, initial);
}

nav ul {
    list-style-type: none;
    padding: 0;
    display: flex;
}

nav a:not(:hover) {
    text-decoration: none;
}

blockquote {
    --font-family: var(--font-body, inherit);
    --font-size: var(--step-0, initial);
    margin-block: var(--step-1, 1.3rem);
    margin-inline: auto;
    padding-block-start: var(--step-1, 1.3rem);
    padding-inline-end: 0;
    padding-block-end: var(--step--2, 0.43rem);
    padding-inline-start: var(--step-3, 2.6rem);
}

blockquote::before {
    content: "\201C";
    position: absolute;
    font-size: var(--step-5, 4rem);
    font-weight: 800;
    /* Gotta find logical property replacements for these -b 5.29 */
    left: 0;
    top: 0;
}

hr {
    border-block-start: 1px solid var(--sjsu-color-normal-gray);
}

.sjsu-theme-blue {
    --background-color: var(--sjsu-color-blue);
    --text-color: white;
    --link-color: white;
}

.sjsu-theme-light-gray {
    --background-color: var(--sjsu-color-paseo-gray);
    --text-color: var(--sjsu-color-not-quite-black);
    --link-color: var(--sjsu-color-blue);
}

.sjsu-theme-default {
    --background-color: white;
    --text-color: var(--sjsu-color-not-quite-black);
    --link-color: var(--sjsu-color-blue);
}

}

@layer layout {
    :root {
        --s0: 0;
        --s1: 1rem;
        --s2: 2rem;
        --s3: 4rem;
        --s4: 8rem;
    }

@layer primitives {

    box-l {
            display: block;
            padding: var(--s1);
            border-width: var(--border-thin);
            /* â†“ For high contrast mode */
            outline: var(--border-thin) solid transparent;
            outline-offset: calc(var(--border-thin) * -1);
        }

    center-l {
    display: block;
    box-sizing: content-box;
    margin-inline: auto;
    max-inline-size: var(--measure);
    }

    cluster-l {
    display: flex;
    flex-wrap: wrap;
    justify-content: flex-start;
    align-items: flex-start;
    }

    container-l {
    display: block;
    }

    cover-l {
    display: flex;
    flex-direction: column;
    min-block-size: 100vh;
    padding: var(--s1);
    }

    frame-l {
    aspect-ratio: 16 / 9;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
    }

    frame-l>img,
    frame-l>video {
    inline-size: 100%;
    block-size: 100%;
    object-fit: cover;
    }

    grid-l {
    display: grid;
    grid-gap: var(--s1);
    align-content: start;
    grid-template-columns: 100%;
    }

    grid-l {
    display: grid;
    grid-gap: var(--s1);
    align-content: start;
    grid-template-columns: 100%;
    }

    icon-l svg {
    height: 0.75em;
    height: 1cap;
    width: 0.75em;
    width: 1cap;
    }

    imposter-l {
    position: absolute;
    inset-block-start: 50%;
    inset-inline-start: 50%;
    transform: translate(-50%, -50%);
    }

    sidebar-l {
    display: flex;
    flex-wrap: wrap;
    }

    sidebar-l>* {
    flex-grow: 1;
    }

    stack-l {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    }

    stack-l>*+* {
    margin-block-start: var(--s1);
    }

    switcher-l {
    display: flex;
    flex-wrap: wrap;
    }

    switcher-l>* {
    flex-basis: calc((var(--measure) - 100%) * 999);
    flex-grow: 1;
    }

}

/* from Scaling CSS Layout Beyond Pixels - Stephanie Eckles 

Super flexible container element that automatically manages its own width based on the viewport size, trying to maintain at least 80ch width. No need to assign variable padding with media queries. */

.container {
    width: min(100vw - 2rem, var(--container-max, 80ch));
    margin-inline: auto;
}

.wrap {
    width: 100vw;
}

/* from Modern CSS for Dynamic Component-based Architecture - Stephanie Eckles
"This utility creates a responsive set of columns that are auto-generated depending on the amount of available inline space. Includes custom property to define the minimum allowed size for a column, which will function as a "breakpoint" for each column before causing the overflow to become new rows. For the most flexibility, I also like to include a custom property to allow overriding the `gap`."
 */

.layout-grid {
    --layout-grid-min: var(--sjsu-grid-min, 30ch);
    --layout-grid-gap: var(--sjsu-grid-gap, 2vw);

    display: grid;
    grid-template-columns: repeat(auto-fit,
            minmax(min(100%, var(--layout-grid-min)), 1fr));
    gap: var(--layout-grid-gap);
}

/* Container query */
:is(.layout-grid, .flex-layout-grid)>* {
    container: var(--grid-item-container, grid-item) / inline-size;
}

}

@layer components {

/* breadcrumb */
/* a nav element for .bc? -b */
.breadcrumb {
    font-size: var(--step--2);
    background: var(--sjsu-color-white);
    
    /* are these necessary if .bc inherits from nav?
    /* theming aspects are necessary, but layout are not
    /* not all <nav> elements are going to be styled the same way
    display: block;
    padding: calc(.5 * var(--sjsu-vr)) var(--sjsu-layout-width);
    */
}
.breadcrumb>*:not(:last-child)::after {
    margin-inline-end: 0.75rem;
    margin-inline-start: 0.75rem;
    opacity: 1;
    content: url('https://www.sjsu.edu/aspis/media/icons/ui/icon-angle-bracket-right-sjsu-gray-small.svg');
}
/* not needed if nav
/* there are some defaults set to links we need to revisit 

.bc__menu {
    list-style-type: none;
    margin: 0;
    padding: 0;
    display: flex;
}

.bc__item {
    font-family: var(--sjsu-font-display);
    line-height: 1;
}

.bc__item a:link {
    text-decoration: none;
}
*/


/* .button
This component has a de-facto API that allows for modular control over features using custom properties.

source? -b

*/

.button {
    color: var(--button-color, var(--primary));
    background-color: var(--button-bg, var(--accent));
}

.button:where(:has(.icon)) {
    display: flex;
    gap: 0.5em;
    align-items: center;
}

.button:where(:has(.inclusively-hidden)) {
    border-radius: 50%;
    padding: 0.5em;
}

.button:where(:not(:has(.icon))) {
    text-align: center;
    min-inline-size: 10ch;
}

.button:where(:not(:has(.inclusively-hidden))) {
    padding: var(--button-padding, 0.35em 1em);
    border-radius: 0;
}

.button:hover {
    --button-bg: var(--accent--alt);
    --button-color: var(--primary);
}

.button:focus-visible {
    --outline-style: dashed;
    --outline-offset: -0.35em;
}

/* /.button */


/*
re: ".title-page"
Are single-property CSS classes necessary for a templated page if we can pass variable declarations in a style attribute from within the template? -b 5.29
Yes; style should be as separated from the XSL as possible. -b 5.29
*/

.title-site {
    --font-size: var(--step-3);
}

.title-parent-org {
    --font-size:var(--step-2);
}

.nav-site a {
    padding-inline: var(--padding);    
    padding-block: var(--padding-half);
}

/* indented nav 
.nav-site a:not(:first-child) {
    padding-inline-start: var(--padding);
}

.nav-site a:not(:last-child) {
    padding-inline-end: var(--padding);
}
*/
.nav-site a:hover, .nav-site a:focus {
    --background-color: var(--sjsu-color-blue);
    --text-color: var(--color-white);
    --link-color: var(--color-white);
}

.title-page {
    --font-size:var(--step-4);
}

}

@layer utilities {





/* This class will limit text content to the value of the "line-clamp" property */
.line-limit {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
}
}

@layer states {
    /* TK */
}

@layer overrides {
    /* TK */
}
